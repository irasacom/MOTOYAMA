basePath: /api/v1
definitions:
  handler.createBookingRequest:
    properties:
      client_name:
        description: ClientName имя клиента, оформляющего бронь.
        example: Павел
        type: string
      client_phone:
        description: ClientPhone телефон клиента, оформляющего бронь.
        example: "89876545654"
        type: string
      desired_datetime:
        description: DesiredDatetime представляет дату и время посещения ресторана
          в рамках брони
        example: 2022.06.16 17:03
        type: string
      people_number:
        example: 3
        type: integer
    type: object
  handler.createBookingResponse:
    properties:
      id:
        example: 1
        type: integer
    type: object
  handler.createRestaurantRequest:
    properties:
      average_check:
        example: "2500.00"
        type: string
      average_waiting_time:
        example: "60"
        type: string
      name:
        example: Каравелла
        type: string
    type: object
  handler.createRestaurantResponse:
    properties:
      id:
        example: 1
        type: integer
    type: object
  handler.createTableRequest:
    properties:
      seats_number:
        example: 3
        type: integer
    type: object
  handler.createTableResponse:
    properties:
      id:
        example: 2
        type: integer
    type: object
  handler.deleteRestaurantResponse:
    properties:
      status:
        example: ok
        type: string
    type: object
  handler.deleteTableResponse:
    properties:
      status:
        type: string
    type: object
  handler.errResponse:
    properties:
      code:
        example: 400
        type: integer
      error:
        example: missing required fields
        type: string
      status:
        example: invalid request
        type: string
    type: object
  handler.getRestaurantResponse:
    properties:
      available_seats_number:
        description: AvailableSeatsNumber представляет актуальное количество свободных
          мест.
        example: 24
        type: integer
      average_check:
        description: AverageCheck представляет средний чек на блюдо в ресторане.
        example: 2500
        type: number
      average_waiting_time:
        description: AverageWaitingTime представляет среднее время ожидания заказа
          в минутах.
        example: 60
        type: integer
      id:
        example: 3
        type: integer
      name:
        example: Каравелла
        type: string
    type: object
  handler.getTableResponse:
    properties:
      id:
        example: 3
        type: integer
      restaurant_id:
        example: 2
        type: integer
      seats_number:
        description: SeatsNumber представляет вместимость столика.
        example: 4
        type: integer
    type: object
  handler.listBookingsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Booking'
        type: array
    type: object
  handler.listRestaurantsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Restaurant'
        type: array
    type: object
  handler.listTablesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Table'
        type: array
    type: object
  handler.updateRestaurantResponse:
    properties:
      status:
        example: ok
        type: string
    type: object
  handler.updateTableResponse:
    properties:
      status:
        example: ok
        type: string
    type: object
  model.Booking:
    properties:
      booked_date:
        description: BookedDate представляет дату посещения ресторана в рамках брони.
        example: 2022.06.16
        type: string
      booked_time_from:
        description: BookedTimeFrom представляет время начала брони.
        example: "14:30"
        type: string
      booked_time_to:
        description: BookedTimeTo представляет время конца брони.
        example: "16:30"
        type: string
      client_name:
        description: ClientName представляет имя клиента, оформляющего бронь.
        example: Павел
        type: string
      client_phone:
        description: ClientPhone представляет телефон клиента, оформляющего бронь.
        example: "89485722648"
        type: string
      id:
        example: 3
        type: integer
    type: object
  model.Restaurant:
    properties:
      available_seats_number:
        description: AvailableSeatsNumber представляет актуальное количество свободных
          мест.
        example: 24
        type: integer
      average_check:
        description: AverageCheck представляет средний чек на блюдо в ресторане.
        example: 2500
        type: number
      average_waiting_time:
        description: AverageWaitingTime представляет среднее время ожидания заказа
          в минутах.
        example: 60
        type: integer
      id:
        example: 3
        type: integer
      name:
        example: Каравелла
        type: string
    type: object
  model.Table:
    properties:
      id:
        example: 3
        type: integer
      restaurant_id:
        example: 2
        type: integer
      seats_number:
        description: SeatsNumber представляет вместимость столика.
        example: 4
        type: integer
    type: object
  model.UpdateRestaurantData:
    properties:
      average_check:
        example: "2500.00"
        type: string
      average_waiting_time:
        example: "60"
        type: string
      name:
        example: Каравелла
        type: string
    type: object
  model.UpdateTableData:
    properties:
      seats_number:
        example: 4
        type: integer
    type: object
host: localhost:8080
info:
  contact: { }
  description: API сервиса бронирования столиков в ресторанах
  license:
    name: The MIT License (MIT)
    url: https://mit-license.org/
  termsOfService: http://swagger.io/terms/
  title: Restaurant Table Booking API
  version: "1.0"
paths:
  /restaurants/:
    get:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/handler.listRestaurantsResponse'
        "500":
          description: Ошибка на стороне сервера
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Получить список всех ресторанов
      tags:
        - restaurants
    post:
      consumes:
        - application/json
      parameters:
        - description: Информация о ресторане
          in: body
          name: input
          required: true
          schema:
            $ref: '#/definitions/handler.createRestaurantRequest'
      produces:
        - application/json
      responses:
        "201":
          description: ok
          schema:
            $ref: '#/definitions/handler.createRestaurantResponse'
        "400":
          description: Некорректные данные ресторана
          schema:
            $ref: '#/definitions/handler.errResponse'
        "500":
          description: Ошибка на стороне сервера
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Создать ресторан
      tags:
        - restaurants
  /restaurants/{restaurant_id}/:
    delete:
      consumes:
        - application/json
      description: Если ресторан ожидает гостей (есть брони в будущем/сегодняшнем
        днях в этом ресторане), то его нельзя удалить.
      parameters:
        - description: ID ресторана
          in: path
          name: restaurant_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/handler.deleteRestaurantResponse'
        "400":
          description: Некорректный данные запроса
          schema:
            $ref: '#/definitions/handler.errResponse'
        "500":
          description: Ошибка на стороне сервера
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Удаляет ресторан по его ID
      tags:
        - restaurants
    get:
      consumes:
        - application/json
      parameters:
        - description: ID ресторана
          in: path
          name: restaurant_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/handler.getRestaurantResponse'
        "400":
          description: Некорректный ID ресторана
          schema:
            $ref: '#/definitions/handler.errResponse'
        "500":
          description: Ошибка на стороне сервера
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Получить ресторан по его ID
      tags:
        - restaurants
    patch:
      consumes:
        - application/json
      description: Обновление происходит именно путём PATCH-запросов, чтобы была возможность
        изменять данные частично.
      parameters:
        - description: ID ресторана
          in: path
          name: restaurant_id
          required: true
          type: string
        - description: Информация о ресторане
          in: body
          name: input
          required: true
          schema:
            $ref: '#/definitions/model.UpdateRestaurantData'
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/handler.updateRestaurantResponse'
        "400":
          description: Некорректный данные запроса
          schema:
            $ref: '#/definitions/handler.errResponse'
        "500":
          description: Ошибка на стороне сервера
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Обновить информацию о ресторане по его ID
      tags:
        - restaurants
  /restaurants/{restaurant_id}/bookings/:
    get:
      consumes:
        - application/json
      parameters:
        - description: ID ресторана
          in: path
          name: restaurant_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/handler.listBookingsResponse'
        "400":
          description: Некорректный restaurant_id
          schema:
            $ref: '#/definitions/handler.errResponse'
        "500":
          description: Ошибка на стороне сервера
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Получить список всех броней, совершённых в ресторане
      tags:
        - bookings
    post:
      consumes:
        - application/json
      parameters:
        - description: ID ресторана
          in: path
          name: restaurant_id
          required: true
          type: string
        - description: Информация о брони
          in: body
          name: input
          required: true
          schema:
            $ref: '#/definitions/handler.createBookingRequest'
      produces:
        - application/json
      responses:
        "201":
          description: ok
          schema:
            $ref: '#/definitions/handler.createBookingResponse'
        "400":
          description: Некорректные данные брони
          schema:
            $ref: '#/definitions/handler.errResponse'
        "500":
          description: Ошибка на стороне сервера
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Оформить бронь в выбранном ресторане
      tags:
        - bookings
  /restaurants/{restaurant_id}/tables/:
    get:
      consumes:
        - application/json
      parameters:
        - description: ID ресторана
          in: path
          name: restaurant_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/handler.listTablesResponse'
        "400":
          description: Некорректный restaurant_id
          schema:
            $ref: '#/definitions/handler.errResponse'
        "500":
          description: Ошибка на стороне сервера
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Получить список столиков в ресторане
      tags:
        - tables
    post:
      consumes:
        - application/json
      parameters:
        - description: ID ресторана
          in: path
          name: restaurant_id
          required: true
          type: string
        - description: Информация о столике
          in: body
          name: input
          required: true
          schema:
            $ref: '#/definitions/handler.createTableRequest'
      produces:
        - application/json
      responses:
        "201":
          description: ok
          schema:
            $ref: '#/definitions/handler.createTableResponse'
        "400":
          description: Некорректные данные столика
          schema:
            $ref: '#/definitions/handler.errResponse'
        "500":
          description: Ошибка на стороне сервера
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Создать столик в ресторане
      tags:
        - tables
  /tables/{table_id}/:
    delete:
      consumes:
        - application/json
      description: Если за столиком ещё будут сидеть клиенты (есть брони в будущем/сегодняшнем
        днях в этом ресторане), то его нельзя удалить.
      parameters:
        - description: ID столика
          in: path
          name: table_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/handler.deleteTableResponse'
        "400":
          description: Некорректный данные запроса
          schema:
            $ref: '#/definitions/handler.errResponse'
        "500":
          description: Ошибка на стороне сервера
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Удаляет столик по его ID
      tags:
        - tables
    get:
      consumes:
        - application/json
      parameters:
        - description: ID столика
          in: path
          name: table_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/handler.getTableResponse'
        "400":
          description: Некорректный ID столика
          schema:
            $ref: '#/definitions/handler.errResponse'
        "500":
          description: Ошибка на стороне сервера
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Получить столик по его ID
      tags:
        - tables
    patch:
      consumes:
        - application/json
      description: Обновление происходит именно путём PATCH-запросов, чтобы была возможность
        изменять данные частично.
      parameters:
        - description: ID столика
          in: path
          name: table_id
          required: true
          type: string
        - description: Информация о столике
          in: body
          name: input
          required: true
          schema:
            $ref: '#/definitions/model.UpdateTableData'
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/handler.updateTableResponse'
        "400":
          description: Некорректный данные запроса
          schema:
            $ref: '#/definitions/handler.errResponse'
        "500":
          description: Ошибка на стороне сервера
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Обновить информацию о столике по его ID
      tags:
        - tables
swagger: "2.0"
